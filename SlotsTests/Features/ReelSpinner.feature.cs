// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SlotsTests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class SlotsMachineFeature : object, Xunit.IClassFixture<SlotsMachineFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ReelSpinner.feature"
#line hidden
        
        public SlotsMachineFeature(SlotsMachineFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, global::Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Slots Machine", "Simple slot machine game", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            global::Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Run the machine with the specified config")]
        [Xunit.TraitAttribute("FeatureTitle", "Slots Machine")]
        [Xunit.TraitAttribute("Description", "Run the machine with the specified config")]
        [Xunit.InlineDataAttribute("200", "10", "\'AAA,BBB,PPP,***\'", "54.0", "244.0", new string[0])]
        [Xunit.InlineDataAttribute("200", "10", "\'AAB,BBP,PPA,AB*\'", "0", "190.0", new string[0])]
        [Xunit.InlineDataAttribute("200", "10", "\'AAA,BBP,PPA,AB*\'", "12", "202.0", new string[0])]
        [Xunit.InlineDataAttribute("200", "10", "\'BAA,AAA,A*B,*AA\'", "20", "210.0", new string[0])]
        [Xunit.InlineDataAttribute("200", "100", "\'*P*,AAA,BBB,PPP\'", "620", "720.0", new string[0])]
        [Xunit.InlineDataAttribute("200", "100", "\'***,***,***,***\'", "0", "100.0", new string[0])]
        public async System.Threading.Tasks.Task RunTheMachineWithTheSpecifiedConfig(string walletStart, string stake, string spin, string totalWinnings, string walletEnd, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("WalletStart", walletStart);
            argumentsOfScenario.Add("stake", stake);
            argumentsOfScenario.Add("spin", spin);
            argumentsOfScenario.Add("Total Winnings", totalWinnings);
            argumentsOfScenario.Add("WalletEnd", walletEnd);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Run the machine with the specified config", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
 await testRunner.GivenAsync("the reel width is 3", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 7
 await testRunner.AndAsync("the line count is 4", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "Character",
                            "Name",
                            "Coefficient",
                            "Probability",
                            "IsWildCard"});
                table1.AddRow(new string[] {
                            "A",
                            "Apple",
                            "0.4",
                            "0.45",
                            "0"});
                table1.AddRow(new string[] {
                            "B",
                            "Banana",
                            "0.6",
                            "0.35",
                            "0"});
                table1.AddRow(new string[] {
                            "P",
                            "Pinaple",
                            "0.8",
                            "0.15",
                            "0"});
                table1.AddRow(new string[] {
                            "*",
                            "SimpleWildCard",
                            "0",
                            "0.05",
                            "1"});
#line 8
 await testRunner.AndAsync("the available symbols are:", ((string)(null)), table1, "And ");
#line hidden
#line 15
 await testRunner.AndAsync("the slot machine is running", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 16
 await testRunner.AndAsync(string.Format("the player wallet has {0}", walletStart), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
 await testRunner.AndAsync(string.Format("the input stake is {0}", stake), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 18
 await testRunner.AndAsync(string.Format("the reel spin is {0}", spin), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 20
 await testRunner.WhenAsync("we pull the handle", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 21
 await testRunner.ThenAsync("we should get a result out", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 22
 await testRunner.AndAsync("we show the wallet", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 23
 await testRunner.AndAsync(string.Format("the winnings displayed are {0}", totalWinnings), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 24
 await testRunner.AndAsync(string.Format("the final player wallet is {0}", walletEnd), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Invalid input")]
        [Xunit.TraitAttribute("FeatureTitle", "Slots Machine")]
        [Xunit.TraitAttribute("Description", "Invalid input")]
        [Xunit.InlineDataAttribute("200", "-1", new string[0])]
        [Xunit.InlineDataAttribute("100", "500", new string[0])]
        [Xunit.InlineDataAttribute("100", "0", new string[0])]
        [Xunit.InlineDataAttribute("0", "50", new string[0])]
        public async System.Threading.Tasks.Task InvalidInput(string walletStart, string stake, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("WalletStart", walletStart);
            argumentsOfScenario.Add("stake", stake);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Invalid input", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 36
 await testRunner.GivenAsync("the reel width is 3", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 37
 await testRunner.AndAsync("the line count is 4", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "Character",
                            "Name",
                            "Coefficient",
                            "Probability",
                            "IsWildCard"});
                table2.AddRow(new string[] {
                            "A",
                            "Apple",
                            "0.4",
                            "0.45",
                            "0"});
                table2.AddRow(new string[] {
                            "B",
                            "Banana",
                            "0.6",
                            "0.35",
                            "0"});
                table2.AddRow(new string[] {
                            "P",
                            "Pinaple",
                            "0.8",
                            "0.15",
                            "0"});
                table2.AddRow(new string[] {
                            "*",
                            "SimpleWildCard",
                            "0",
                            "0.05",
                            "1"});
#line 38
 await testRunner.AndAsync("the available symbols are:", ((string)(null)), table2, "And ");
#line hidden
#line 45
 await testRunner.AndAsync("the slot machine is running", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 46
 await testRunner.AndAsync(string.Format("the player wallet has {0}", walletStart), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 47
 await testRunner.AndAsync(string.Format("the input stake is {0}", stake), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 49
 await testRunner.WhenAsync("we pull the handle", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 50
 await testRunner.ThenAsync("an error is shown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 51
 await testRunner.ButAsync(string.Format("we didn\'t take any money, so their wallet is still {0}", walletStart), ((string)(null)), ((global::Reqnroll.Table)(null)), "But ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await SlotsMachineFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await SlotsMachineFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
